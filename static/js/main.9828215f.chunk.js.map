{"version":3,"sources":["components/Section.js","components/Notification.js","components/Statistics.js","components/FeedbackOptions.js","App.js","serviceWorker.js","index.js"],"names":["Section","props","title","children","Notification","message","Statistics","good","bad","neutral","total","positiveFeedback","FeedbackOptions","options","onLeaveFeedback","map","option","key","id","onClick","name","App","state","handleClick","e","count","target","setState","countTotalFeedback","this","countPositiveFeedbackPercentage","persentage","toFixed","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yMAWeA,EATC,SAACC,GACf,OACE,6BACE,4BAAKA,EAAMC,OACVD,EAAME,WCAEC,EAJM,SAACH,GACpB,OAAO,6BAAMA,EAAMI,UCqBNC,EAtBI,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,IAAKC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC/C,OACE,6BACE,oCACQ,8BAAOJ,IAEf,uCACW,8BAAOE,IAElB,mCACO,8BAAOD,IAEd,qCACS,8BAAOE,IAEhB,iDACqB,8BAAOC,MCHnBC,EAbS,SAACX,GAAW,IAC1BY,EAA6BZ,EAA7BY,QAASC,EAAoBb,EAApBa,gBACjB,OACE,6BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAOC,IAAKC,GAAIF,EAAOE,GAAIC,QAASL,GAC9CE,EAAOI,WC+EHC,E,4MAhFbC,MAAQ,CACNf,KAAM,EACNE,QAAS,EACTD,IAAK,EACLE,MAAO,EACPC,iBAAkB,G,EAGpBY,YAAc,SAACC,GACb,IAAIC,EAAQ,EAAKH,MAAME,EAAEE,OAAOR,IAChC,EAAKS,SAAL,eAEKH,EAAEE,OAAOR,KAAOO,GAEnB,EAAKG,qB,mEAKP,IAAMlB,EAAQmB,KAAKP,MAAMf,KAAOsB,KAAKP,MAAMb,QAAUoB,KAAKP,MAAMd,IAChEqB,KAAKF,SACH,CACEjB,SAEFmB,KAAKC,mC,wDAI0B,IAAD,EACRD,KAAKP,MACvBS,GAF0B,EACxBxB,KADwB,EAClBG,MACuB,KAAKsB,QAAQ,GAClDH,KAAKF,SAAS,CACZhB,iBAAkBoB,EAAa,Q,+BAsBjC,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CAAS/B,MAAM,yBACb,kBAAC,EAAD,CACEW,QArBQ,CACd,CACEO,KAAM,OACNF,GAAI,OACJD,IAAK,GAEP,CACEG,KAAM,UACNF,GAAI,UACJD,IAAK,GAEP,CACEG,KAAM,MACNF,GAAI,MACJD,IAAK,IAQDH,gBAAiBe,KAAKN,eAG1B,kBAAC,EAAD,CAASrB,MAAM,cACZ2B,KAAKP,MAAMZ,MACV,kBAAC,EAAD,CACEH,KAAMsB,KAAKP,MAAMf,KACjBE,QAASoB,KAAKP,MAAMb,QACpBD,IAAKqB,KAAKP,MAAMd,IAChBE,MAAOmB,KAAKP,MAAMZ,MAClBC,iBAAkBkB,KAAKP,MAAMX,mBAG/B,kBAAC,EAAD,CAAcN,QAAQ,4B,GAzEhB6B,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhD,a","file":"static/js/main.9828215f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Section = (props) => {\n  return (\n    <div>\n      <h2>{props.title}</h2>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Section;\n","import React from \"react\";\n\nconst Notification = (props) => {\n  return <div>{props.message}</div>;\n};\n\nexport default Notification;\n","import React from \"react\";\n\nconst Statistics = ({ good, bad, neutral, total, positiveFeedback }) => {\n  return (\n    <div>\n      <p>\n        Good: <span>{good}</span>\n      </p>\n      <p>\n        Neutral: <span>{neutral}</span>\n      </p>\n      <p>\n        Bad: <span>{bad}</span>\n      </p>\n      <p>\n        Total: <span>{total}</span>\n      </p>\n      <p>\n        Positive feedback: <span>{positiveFeedback}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst FeedbackOptions = (props) => {\n  const { options, onLeaveFeedback } = props;\n  return (\n    <div>\n      {options.map((option) => (\n        <button key={option.key} id={option.id} onClick={onLeaveFeedback}>\n          {option.name}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport Section from \"./components/Section\";\nimport Notification from \"./components/Notification\";\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\n\nclass App extends React.Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    total: 0,\n    positiveFeedback: 0,\n  };\n\n  handleClick = (e) => {\n    let count = this.state[e.target.id];\n    this.setState(\n      {\n        [e.target.id]: ++count,\n      },\n      this.countTotalFeedback\n    );\n  };\n\n  countTotalFeedback() {\n    const total = this.state.good + this.state.neutral + this.state.bad;\n    this.setState(\n      {\n        total,\n      },\n      this.countPositiveFeedbackPercentage\n    );\n  }\n\n  countPositiveFeedbackPercentage() {\n    const { good, total } = this.state;\n    const persentage = ((good / total) * 100).toFixed(2);\n    this.setState({\n      positiveFeedback: persentage + \"%\",\n    });\n  }\n\n  render() {\n    const options = [\n      {\n        name: \"Good\",\n        id: \"good\",\n        key: 0,\n      },\n      {\n        name: \"Neutral\",\n        id: \"neutral\",\n        key: 1,\n      },\n      {\n        name: \"Bad\",\n        id: \"bad\",\n        key: 2,\n      },\n    ];\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {this.state.total ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.state.total}\n              positiveFeedback={this.state.positiveFeedback}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}